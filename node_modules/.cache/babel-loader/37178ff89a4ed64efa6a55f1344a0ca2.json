{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CarouselItem from './CarouselItem';\nimport { CarouselContext } from './CarouselContext';\nimport { mapToCssModules, omit } from './utils';\nvar SWIPE_THRESHOLD = 40;\nvar propTypes = {\n  /** the current active slide of the carousel */\n  activeIndex: PropTypes.number,\n  /** a function which should advance the carousel to the next slide (via activeIndex) */\n  next: PropTypes.func.isRequired,\n  /** a function which should advance the carousel to the previous slide (via activeIndex) */\n  previous: PropTypes.func.isRequired,\n  /** controls if the left and right arrow keys should control the carousel */\n  keyboard: PropTypes.bool,\n  /** If set to \"hover\", pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on\n   * mouseleave. If set to false, hovering over the carousel won't pause it.\n   */\n  pause: PropTypes.oneOf(['hover', false]),\n  /** Autoplays the carousel after the user manually cycles the first item. If \"carousel\", autoplays the carousel on load. */\n  ride: PropTypes.oneOf(['carousel']),\n  /** the interval at which the carousel automatically cycles */\n  interval: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool]),\n  children: PropTypes.array,\n  /** called when the mouse enters the Carousel */\n  mouseEnter: PropTypes.func,\n  /** called when the mouse exits the Carousel */\n  mouseLeave: PropTypes.func,\n  /** controls whether the slide animation on the Carousel works or not */\n  slide: PropTypes.bool,\n  /** make the controls, indicators and captions dark on the Carousel */\n  dark: PropTypes.bool,\n  fade: PropTypes.bool,\n  /** Change underlying component's CSS base class name */\n  cssModule: PropTypes.object,\n  /** Add custom class */\n  className: PropTypes.string,\n  /** Enable touch support */\n  enableTouch: PropTypes.bool\n};\nvar propsToOmit = Object.keys(propTypes);\nvar defaultProps = {\n  interval: 5000,\n  pause: 'hover',\n  keyboard: true,\n  slide: true,\n  enableTouch: true,\n  fade: false\n};\nvar Carousel = /*#__PURE__*/function (_React$Component) {\n  _inherits(Carousel, _React$Component);\n  var _super = _createSuper(Carousel);\n  function Carousel(props) {\n    var _this;\n    _classCallCheck(this, Carousel);\n    _this = _super.call(this, props);\n    _this.handleKeyPress = _this.handleKeyPress.bind(_assertThisInitialized(_this));\n    _this.renderItems = _this.renderItems.bind(_assertThisInitialized(_this));\n    _this.hoverStart = _this.hoverStart.bind(_assertThisInitialized(_this));\n    _this.hoverEnd = _this.hoverEnd.bind(_assertThisInitialized(_this));\n    _this.handleTouchStart = _this.handleTouchStart.bind(_assertThisInitialized(_this));\n    _this.handleTouchEnd = _this.handleTouchEnd.bind(_assertThisInitialized(_this));\n    _this.touchStartX = 0;\n    _this.touchStartY = 0;\n    _this.state = {\n      activeIndex: _this.props.activeIndex,\n      direction: 'end',\n      indicatorClicked: false\n    };\n    return _this;\n  }\n  _createClass(Carousel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Set up the cycle\n      if (this.props.ride === 'carousel') {\n        this.setInterval();\n      }\n\n      // TODO: move this to the specific carousel like bootstrap. Currently it will trigger ALL carousels on the page.\n      document.addEventListener('keyup', this.handleKeyPress);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.activeIndex === this.state.activeIndex) return;\n      this.setInterval();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearInterval();\n      document.removeEventListener('keyup', this.handleKeyPress);\n    }\n  }, {\n    key: \"handleKeyPress\",\n    value: function handleKeyPress(evt) {\n      if (this.props.keyboard) {\n        if (evt.keyCode === 37) {\n          this.props.previous();\n        } else if (evt.keyCode === 39) {\n          this.props.next();\n        }\n      }\n    }\n  }, {\n    key: \"handleTouchStart\",\n    value: function handleTouchStart(e) {\n      if (!this.props.enableTouch) {\n        return;\n      }\n      this.touchStartX = e.changedTouches[0].screenX;\n      this.touchStartY = e.changedTouches[0].screenY;\n    }\n  }, {\n    key: \"handleTouchEnd\",\n    value: function handleTouchEnd(e) {\n      if (!this.props.enableTouch) {\n        return;\n      }\n      var currentX = e.changedTouches[0].screenX;\n      var currentY = e.changedTouches[0].screenY;\n      var diffX = Math.abs(this.touchStartX - currentX);\n      var diffY = Math.abs(this.touchStartY - currentY);\n\n      // Don't swipe if Y-movement is bigger than X-movement\n      if (diffX < diffY) {\n        return;\n      }\n      if (diffX < SWIPE_THRESHOLD) {\n        return;\n      }\n      if (currentX < this.touchStartX) {\n        this.props.next();\n      } else {\n        this.props.previous();\n      }\n    }\n  }, {\n    key: \"getContextValue\",\n    value: function getContextValue() {\n      return {\n        direction: this.state.direction\n      };\n    }\n  }, {\n    key: \"setInterval\",\n    value: function (_setInterval) {\n      function setInterval() {\n        return _setInterval.apply(this, arguments);\n      }\n      setInterval.toString = function () {\n        return _setInterval.toString();\n      };\n      return setInterval;\n    }(function () {\n      var _this2 = this;\n      // make sure not to have multiple intervals going...\n      this.clearInterval();\n      if (this.props.interval) {\n        this.cycleInterval = setInterval(function () {\n          _this2.props.next();\n        }, parseInt(this.props.interval, 10));\n      }\n    })\n  }, {\n    key: \"clearInterval\",\n    value: function (_clearInterval) {\n      function clearInterval() {\n        return _clearInterval.apply(this, arguments);\n      }\n      clearInterval.toString = function () {\n        return _clearInterval.toString();\n      };\n      return clearInterval;\n    }(function () {\n      clearInterval(this.cycleInterval);\n    })\n  }, {\n    key: \"hoverStart\",\n    value: function hoverStart() {\n      if (this.props.pause === 'hover') {\n        this.clearInterval();\n      }\n      if (this.props.mouseEnter) {\n        var _this$props;\n        (_this$props = this.props).mouseEnter.apply(_this$props, arguments);\n      }\n    }\n  }, {\n    key: \"hoverEnd\",\n    value: function hoverEnd() {\n      if (this.props.pause === 'hover') {\n        this.setInterval();\n      }\n      if (this.props.mouseLeave) {\n        var _this$props2;\n        (_this$props2 = this.props).mouseLeave.apply(_this$props2, arguments);\n      }\n    }\n  }, {\n    key: \"renderItems\",\n    value: function renderItems(carouselItems, className) {\n      var _this3 = this;\n      var slide = this.props.slide;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className\n      }, carouselItems.map(function (item, index) {\n        var isIn = index === _this3.state.activeIndex;\n        return /*#__PURE__*/React.cloneElement(item, {\n          \"in\": isIn,\n          slide: slide\n        });\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n      var _this$props3 = this.props,\n        cssModule = _this$props3.cssModule,\n        slide = _this$props3.slide,\n        className = _this$props3.className,\n        dark = _this$props3.dark,\n        fade = _this$props3.fade;\n      var attributes = omit(this.props, propsToOmit);\n      var outerClasses = mapToCssModules(classNames(className, 'carousel', fade && 'carousel-fade', slide && 'slide', dark && 'carousel-dark'), cssModule);\n      var innerClasses = mapToCssModules(classNames('carousel-inner'), cssModule);\n\n      // filter out booleans, null, or undefined\n      var children = this.props.children.filter(function (child) {\n        return child !== null && child !== undefined && typeof child !== 'boolean';\n      });\n      var slidesOnly = children.every(function (child) {\n        return child.type === CarouselItem;\n      });\n\n      // Rendering only slides\n      if (slidesOnly) {\n        return /*#__PURE__*/React.createElement(\"div\", _extends({}, attributes, {\n          className: outerClasses,\n          onMouseEnter: this.hoverStart,\n          onMouseLeave: this.hoverEnd\n        }), /*#__PURE__*/React.createElement(CarouselContext.Provider, {\n          value: this.getContextValue()\n        }, this.renderItems(children, innerClasses)));\n      }\n\n      // Rendering slides and controls\n      if (children[0] instanceof Array) {\n        var _carouselItems = children[0];\n        var _controlLeft = children[1];\n        var _controlRight = children[2];\n        return /*#__PURE__*/React.createElement(\"div\", _extends({}, attributes, {\n          className: outerClasses,\n          onMouseEnter: this.hoverStart,\n          onMouseLeave: this.hoverEnd\n        }), /*#__PURE__*/React.createElement(CarouselContext.Provider, {\n          value: this.getContextValue()\n        }, this.renderItems(_carouselItems, innerClasses), _controlLeft, _controlRight));\n      }\n\n      // Rendering indicators, slides and controls\n      var indicators = children[0];\n      var wrappedOnClick = function wrappedOnClick(e) {\n        if (typeof indicators.props.onClickHandler === 'function') {\n          _this4.setState({\n            indicatorClicked: true\n          }, function () {\n            return indicators.props.onClickHandler(e);\n          });\n        }\n      };\n      var wrappedIndicators = /*#__PURE__*/React.cloneElement(indicators, {\n        onClickHandler: wrappedOnClick\n      });\n      var carouselItems = children[1];\n      var controlLeft = children[2];\n      var controlRight = children[3];\n      return /*#__PURE__*/React.createElement(\"div\", _extends({}, attributes, {\n        className: outerClasses,\n        onMouseEnter: this.hoverStart,\n        onMouseLeave: this.hoverEnd,\n        onTouchStart: this.handleTouchStart,\n        onTouchEnd: this.handleTouchEnd\n      }), /*#__PURE__*/React.createElement(CarouselContext.Provider, {\n        value: this.getContextValue()\n      }, wrappedIndicators, this.renderItems(carouselItems, innerClasses), controlLeft, controlRight));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = null;\n      var activeIndex = prevState.activeIndex,\n        direction = prevState.direction,\n        indicatorClicked = prevState.indicatorClicked;\n      if (nextProps.activeIndex !== activeIndex) {\n        // Calculate the direction to turn\n        if (nextProps.activeIndex === activeIndex + 1) {\n          direction = 'end';\n        } else if (nextProps.activeIndex === activeIndex - 1) {\n          direction = 'start';\n        } else if (nextProps.activeIndex < activeIndex) {\n          direction = indicatorClicked ? 'start' : 'end';\n        } else if (nextProps.activeIndex !== activeIndex) {\n          direction = indicatorClicked ? 'end' : 'start';\n        }\n        newState = {\n          activeIndex: nextProps.activeIndex,\n          direction: direction,\n          indicatorClicked: false\n        };\n      }\n      return newState;\n    }\n  }]);\n  return Carousel;\n}(React.Component);\nCarousel.propTypes = propTypes;\nCarousel.defaultProps = defaultProps;\nexport default Carousel;","map":null,"metadata":{},"sourceType":"module"}